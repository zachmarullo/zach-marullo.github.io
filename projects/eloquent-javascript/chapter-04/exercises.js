////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  let arr1 = [];
  if (start === end) {
    return arr1;
  }
  if (step === undefined){
    if (start < end) {
      for (let i = start; i <= end; i ++){
        arr1.push(i);
      }
    } else {
      for (let j = start; j >= end; j--) {
        arr1.push(j)
      }
    }
  } else {
    if (step < 0) {
      return arr1;
    }
    if (start < end) {
      for (let i = start; i <= end; i += step){
        arr1.push(i);
      }
    } else {
      for (let j = start; j >= end; j-= step) {
        arr1.push(j)
      }
    }
  }
  return arr1;
}  

 

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var count = 0;
  for (var z = 0; z < array.length; z++) {
    count += array[z];
  }
  return count;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let arr2 = [];
  if (array.length === 0) {
    return arr2;
  }
  for (let j = array.length - 1; j >= 0; j--) {
    arr2.push(array[j]);
  }
  return arr2;
};

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace() {

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;
  for (var i = array.length - 1; i >= 0; i--) {
      rest = { value: array[i], rest: rest};
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array=[]) {
  if (list.rest === null) {
    array.push(list.value);
    return array;
  }
  array.push(list.value);
return listToArray(list.rest, array);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) { 
  if (typeof x !== 'object' && typeof y !== 'object'){
    return x === y;
  } 
  if (typeof x !== 'object' || typeof y !== 'object') {
    return false;
  }
  var xKeys = Object.keys(x);
  var yKeys = Object.keys(y);
  for (var i = 0; i < xKeys.length; i++){
    if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])) {
      return false;
    }
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
